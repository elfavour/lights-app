name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: eastus
  ACR_REPOSITORY: lights
  AKS_CLUSTER: lightsonheights-aks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Maven test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      # Setup java 11 to be default (sonar-scanner requirement as of 5.x)
      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
         distribution: 'temurin' # See 'Supported distributions' for available options
         java-version: '11'

      # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
           -Dsonar.sources=src/
           -Dsonar.junit.reportsPath=target/surefire-reports/ 
           -Dsonar.jacoco.reportsPath=target/jacoco.exec 
           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/  

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5


  BUILD_AND_PUBLISH:   
    needs: Testing
    runs-on: ubuntu-latest
    steps:
            - name: Code checkout
              uses: actions/checkout@v4
            #Used Github Action to build, scan and push to ACR
            - name: Docker build
              shell: bash
              run: |
                docker build -t ${{ inputs.image-name }}:${{ inputs.tag }} --build-arg NUGET_PAT=${{ inputs.nuget-pat }} .
        
            - name: Set up Clair
              shell: bash
              run: |
                curl -L \
                  https://github.com/arminc/clair-scanner/releases/download/v12/clair-scanner_linux_amd64 \
                  -o clair-scanner && \
                  chmod +x ./clair-scanner
                docker run -d --name clair-db arminc/clair-db:latest
                docker run -p 6060:6060 --link clair-db:postgres -d --name clair arminc/clair-local-scan:latest
        
            - name: Scan image with Clair
              shell: bash
              run: |
                ip=$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
                ./clair-scanner --ip $ip ${{ inputs.image-name }}:${{ inputs.tag }}
        
            - name: ACR Push
              shell: bash
              run: |
                if [[ "${{ inputs.should-push-to-acr }}" == true ]]; then
                  az acr login -u ${{ inputs.client-id }} -p ${{ inputs.client-secret }} -n ${{ inputs.acr-name }}
                  docker push ${{ inputs.image-name }}:${{ inputs.tag }}
                fi
                exit 0
        
  DeployToAKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
            - name: Code checkout
              uses: actions/checkout@v4

            - name: Get Kube config file
              id: getconfig
              if: steps.apple.outcome == 'success'
              run: az aks get-credentials --resource-group <resource-group-name> --name <aks-cluster-name>

            - name: Login to ACR
              uses: azure/docker-login@v1
              with:
               login-server: contoso.azurecr.io
               username: ${{ secrets.REGISTRY_USERNAME }}
               password: ${{ secrets.REGISTRY_PASSWORD }}
              
            - name: Deploy Helm
              run: helm upgrade --install lightsapp /helm/lightscharts --namespace default
              
